#!/usr/bin/env php
<?php

require_once(__DIR__.'/lib/common.php');
require_once(__DIR__.'/lib/visitors.php');
require_once(__DIR__.'/lib/visitor_merge.php');
require_once(__DIR__.'/lib/localization.php');

// Create new notifier, defaulting to author's home lab.
$notify_class = array_key_exists(1, $argv) ? $argv[1] : 'LocalizationHacklabJkl';
$notifier = new $notify_class();

$find_leavers = $db->prepare("
	SELECT nick,enter,leave
	FROM visit v
	JOIN user_mac m ON (SELECT rowid
	                    FROM user_mac
	                    WHERE mac=v.mac AND changed<v.leave
	                    ORDER BY changed DESC
	                    LIMIT 1
	                   )=m.rowid
	JOIN user u ON m.id=u.id
	WHERE leave >= ?
	ORDER BY leave DESC
");
$find_user_by_id = $db->prepare("SELECT * from user WHERE id=?");

$pipe = popen("exec journalctl -n0 -ojson -f -u visitors -u rtl_433", "r");
$last_press = 0;

while (true) {
    $raw = fgets($pipe);
    if ($raw === FALSE) {
        // EOF
        break;
    }
    $e = json_decode($raw);
    if ($e === NULL) {
        print("Panic: Not systemd log export format\n");
        exit(1);
    }

    // Try decoding the message as well.
    $e->json = json_decode($e->MESSAGE);
    
    switch ($e->_SYSTEMD_UNIT) {
    case 'rtl_433.service':
        // Radio controlled buttons parsed by rtl_433

        // Remove timestamps to identify duplicates
        if ($e->json !== NULL) $e->json->time = NULL;
        // Name some common RTL error cases
        if (strpos($e->MESSAGE, 'rtlsdr_demod_write_reg failed') === 0) {
            $e->json = "rtl_error";
        } else if (strpos($e->MESSAGE, 'Using device ') === 0) {
            $e->json = "rtl_ok";
        } else if ($e->json === NULL) {
            // Ignore garbage
            break;
        } else {
            if ($e->json->model === 'Generic Remote') {
                $e->json->released = $e->json->tristate[11] === '1';
                $e->json->chan = strpos($e->json->tristate, '0');
                $e->json->button = strpos($e->json->tristate, '0', 4)-4;
                $e->json->on = $e->json->tristate[11] === 'F';
                $e->json->tristate = NULL; // Not needed anymore
            }
        }

        // If the same state comes soon enough
        if (time() < $last_press + 20 && $rtl_433_state === (array)$e->json) break;

        // Localize
        if ($notifier->button($e->json)) {
            // Save last state if successful
            $rtl_433_state = (array)$e->json;
            $last_press = time();
        }
        break;
    case 'visitors.service':
        // Visitors via DHCP parsed by follow_dhcp.
        
        // Skip if not containing JSON payload
        if ($e->json === NULL) break;

        if ($e->json->ids === []) {
            // Lab is now empty
            $leavers_result = db_execute($find_leavers, [$e->json->occupied]);
            $a = [];
            while (($row = $leavers_result->fetchArray(SQLITE3_ASSOC))) {
                array_push($a, $row);
            }
            $notifier->last_leave(merge_visits($a));
        }

        if ($e->json->occupied === $e->json->ts) {
            // Lab got first visitor
            $user = db_execute($find_user_by_id, [$e->json->ids[0]])->fetchArray(SQLITE3_ASSOC);
            $notifier->first_join($user);
        }
        break;
    }  
}
