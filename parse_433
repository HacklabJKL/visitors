#!/usr/bin/env php
<?php

require_once(__DIR__.'/lib/common.php');
require_once(__DIR__.'/lib/visitors.php');
require_once(__DIR__.'/lib/visitor_merge.php');
require_once(__DIR__.'/lib/irc.php');
require_once(__DIR__.'/lib/lang.php');
$lang = 'LangFinnishHacklab';

// IRC reporting, TODO move out of here
$find_leavers = $db->prepare("
	SELECT nick,enter,leave
	FROM visit v
	JOIN user_mac m ON (SELECT rowid
	                    FROM user_mac
	                    WHERE mac=v.mac AND changed<v.leave
	                    ORDER BY changed DESC
	                    LIMIT 1
	                   )=m.rowid
	JOIN user u ON m.id=u.id
	WHERE leave >= ?
	ORDER BY leave DESC
");
$find_user_by_id = $db->prepare("SELECT * from user WHERE id=?");

function set_state($new) {
    global $lang;
    static $state;
    if ($state === $new) {
        // Don't report multiple times the same
        return;
    }
    $e = is_array($new) ? (object)$new : $new; // Hack because object comparison doesn't work.

    // TODO Replace this ugly if-elseif with SOMETHING!
    if ($e === 'rtl_error') {
        $msg = 'Softaradio meni sekaisin. :-/ Voisiko joku ottaa sen mustan tikun irti reitittimestä ja laittaa takaisin?';
    } else if ($e === 'rtl_ok') {
        $msg = 'Kiitos, softaradio toimii taas. <3';
    } else if ($e->chan === 0 && $e->button === 0 && $e->state) {
        $msg = 'Hacklabin valot syttyivät!';
        exec('sudo systemctl start qra');
    } else if ($e->chan === 0 && $e->button === 0 && !$e->state) {
        $msg = 'Hacklabin valot sammuivat!';
        exec('sudo systemctl stop qra');
    } else if ($e->chan === 0 && $e->button === 2 && $e->state) {
        $msg = 'Icchan^ selittää kovasti jostakin. :-)';
    } else if ($e->chan === 0 && $e->button === 3 && $e->state) {
        global $dhcp_lease_secs;
        
        // Search current visitors
        $req = [
            'lease' => $dhcp_lease_secs,
            'now' => time(),
        ];
        $msg = $lang::evening_start(get_visitors($req));
    } else if ($e->chan === 0 && $e->button === 3 && !$e->state) {
        $msg = "Labilta ollaan tekemässä lähtöä...";
    } else {
        return; // No match, no reporting
    }
    
    $state = $new;
    to_irc($msg);
}

function parse_433($e) {
    if (gettype($e->MESSAGE) === "string") {
        if (strpos($e->MESSAGE, 'rtlsdr_demod_write_reg failed') === 0) return "rtl_error";
        if (strpos($e->MESSAGE, 'Using device ') === 0) return "rtl_ok";
        return NULL;
    } else {
        // Not remote
        if ($e->MESSAGE->model !== 'Generic Remote') return NULL;
        // Button release
        if ($e->MESSAGE->tristate[11] === '1') return NULL;
    
        return [
            'chan' => strpos($e->MESSAGE->tristate, '0'),
            'button' => strpos($e->MESSAGE->tristate, '0', 4)-4,
            'state' => $e->MESSAGE->tristate[11] === 'F',
        ];
    }
}

$pipe = popen("exec journalctl -n0 -ojson -f -u visitors -u rtl_433", "r");

while (true) {
    $raw = fgets($pipe);
    if ($raw === FALSE) {
        // EOF
        break;
    }
    $entry = json_decode($raw);
    if ($entry === NULL) {
        print("Panic: Not systemd log export format\n");
        exit(1);
    }

    // Try decoding the message as well.
    $x = json_decode($entry->MESSAGE);
    if ($x !== NULL) {
        $entry->MESSAGE = $x;
    }
    
    switch ($entry->_SYSTEMD_UNIT) {
    case 'rtl_433.service':
        $res = parse_433($entry);
        if ($res === NULL) continue;
        set_state($res);
        break;
    case 'visitors.service':
        if ($json === NULL) {
            // Garbage
            continue;
        }

        if ($json->ids === []) {
            // Lab is now empty
            $leavers_result = db_execute($find_leavers, [$entry->MESSAGE->occupied]);
            $a = [];
            while (($row = $leavers_result->fetchArray(SQLITE3_ASSOC))) {
                array_push($a, $row);
            }
            to_irc($lang::leave_line(merge_visits($a)));
        }

        if ($json->occupied === $json->ts) {
            // Lab got first visitor
            $user = db_execute($find_user_by_id, [$entry->MESSAGE->ids[0]])->fetchArray(SQLITE3_ASSOC);
            to_irc($lang::join_line(join_visits($user)));
        }
        break;
    }  
}
